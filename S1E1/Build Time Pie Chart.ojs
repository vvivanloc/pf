md`
# Pie Chart
`;

d3 = require("d3@5");

data = d3.csvParse(
`name,value
i, 40
a, 90
b, 60
c, 180
e, 46
f, 420
d, 1020
h, 36
g, 186
j, 340
`,
  d3.autoType
);


/** returns the midangle */
midAngle = function (startAngle, endAngle) {
  return startAngle + (endAngle - startAngle) / 2;
};



/*
theme = Generators.observe((notify) => {
  const query = matchMedia("(prefers-color-scheme: dark)");
  const changed = () => notify(query.matches ? "dark" : "light");
  changed();
  query.addListener(changed);
  return () => query.removeListener(changed);
});
*/

theme = "light"


legendTypes= ["inside","polylines", "outside"]
sortMethods=["none","byName","byValue"]
gradientColors=["spectral","rgb","hsl","viridis"]

viewof legendType = Inputs.select(legendTypes, {label: "Legend", value:"outside"})

viewof sortMethod = Inputs.select(sortMethods, {label: "Sort by", value:"byValue"})


// FIXME: does not sort well
viewof useWSJsort = Inputs.toggle({label:"Wall Street Journal sorting", value:false})

viewof nbMaxSlices = Inputs.range([1,data.length], {label:"Nb max slices",step: 1, value:2})

// "spectral"|"rgb"|"hsl"|"viridis"
viewof gradientColor = Inputs.select(gradientColors, {label: "Color gradient", value:"spectral"})
viewof startColor = Inputs.color({label: "Start color", value: d3.color("red").formatHex(), disabled:gradientColor==="spectral"||gradientColor==="viridis"})
viewof endColor = Inputs.color({label: "End color", value: d3.color("blue").formatHex()})
viewof gradientNbSteps = Inputs.range([1,nbMaxSlices], {label:"Repeat color step",step: 1, value:nbMaxSlices})


viewof donut = Inputs.toggle({label:"Mmmm donut!", value:false})
 
/* WSL recommended sorting for pie chart  */
MyWSJPieSorting = function (array) {
  let WSJproportion = [array[0]]
    .concat(array.slice(2).reverse())
    .concat(array[1]);
  return WSJproportion;
};

sortingFunctor = function () {
  if (sortMethod==="none") {
    return null;
  }
  if (sortMethod==="byName") {
    return (a, b) => d3.ascending(a.name, b.name);
  }
  if (sortMethod==="byValue") {
    return (a, b) => d3.descending(a.value,b.value);
  }
}

buildColor = function () {
  if (gradientColor==="spectral") {
    return d3.quantize((t) => d3.interpolateSpectral(t * 0.8 + 0.1), gradientNbSteps) 
  }

  if (gradientColor==="rgb") {
    return d3.quantize((t) => d3.interpolateRgb(startColor, endColor)(t * 0.8 + 0.1), gradientNbSteps)
  }

  if (gradientColor==="hsl") {
    return d3.quantize((t) => d3.interpolateHslLong(startColor, endColor)(t), gradientNbSteps)
  }

  if (gradientColor==="viridis") {
    return d3.quantize((t) => d3.interpolateViridis(t), gradientNbSteps)
  }
}

chart = {

  const strokeColor = theme === "dark" ? "white" : "black"
  const _nbMaxSlices = Math.min(nbMaxSlices,data.length)
  
  let _data = [...data];

  const _sortingFunctor = sortingFunctor();
  if (_sortingFunctor!==null) {
    _data = _data.sort(_sortingFunctor)
  }  
  
  if (_nbMaxSlices<data.length) {
    _data = _data.slice(0,_nbMaxSlices).concat([{name: "other", value:_data.slice(_nbMaxSlices,_data.length-1).reduce((accum,d)=>accum+d.value,0)}])
  }
   
   if (useWSJsort) {
   _data = MyWSJPieSorting(_data);
  }

  const color = d3
  .scaleOrdinal()
  .domain(_data.map((d) => d.value))
  .range(buildColor().concat("grey"));

  const pie = d3.pie()
    .sort(_sortingFunctor)
    .value(function(d) {return d.value; })
  
  const arcs =pie(_data);

  const height = Math.min(width, 400);

  const isOnLeftSide = (d) => midAngle(d.startAngle, d.endAngle) < Math.PI;
  const fontSize = 15;
  const buildLabel = (d) =>
    `${d.data.name}: ${d.data.value.toLocaleString("fr-FR")}`;

  const svg = d3
    .create("svg")
    .attr("viewBox", [-width / 2, -height / 2, width, height*1.2]);

  const radius = Math.min(width, height) / 2;

  
  const innerArc = d3
    .arc()
    .outerRadius(radius * 0.8)
    .innerRadius(radius * (donut ? 0.4 : 0.0));
  const outerArc = d3
    .arc()
    .innerRadius(radius * 0.9)
    .outerRadius(radius * 0.9);

  if (donut) {
    /* ----- total ------ */
    svg
      .append("g")
      .attr("font-family", "sans-serif")
      .attr("font-size", fontSize*1.2)
      .attr("text-anchor", "middle")
      .attr("fill", strokeColor)
      .append("text")

      .call((text) =>
        text
          .append("tspan")
          .attr("y", "-0.4em")
          
          .text("total:")
      )
      .call((text) =>
        text
          .append("tspan")
          .attr("x", 0)
          .attr("y", "0.9em")
          
          .text(d3.sum(_data, (d) => d.value).toLocaleString("fr-FR"))
      );
  }

  /* ------- pie slices -------*/
  svg
    .append("g")
    .attr("fill", strokeColor)
    .selectAll("path")
    .data(arcs)
    .join("path")
    .attr("fill", (d) => color(d.value))
    .attr("d", innerArc);

  
  /* ------- text labels inside -------*/
  if (legendType==="inside") { 
    svg
      .append("g")
      .attr("font-size", fontSize)
      .selectAll("text")
      .data(arcs)
      .join("text")
      .attr("transform", function (d) {
        var pos = innerArc.centroid(d);
        pos[0] = pos[0] - (fontSize * 0.75 * buildLabel(d).length) / 2;
        return `translate(${pos})`;
      })

      .attr("fill", strokeColor)
      .text((d) => buildLabel(d));
  }

  /* ------- polylines: text labels  -------*/
   if (legendType==="polylines") { 
    svg
      .append("g")
      .attr("font-size", fontSize)
      .selectAll("text")
      .data(arcs)
      .join("text")
      .attr("transform", function (d) {
        var pos = outerArc.centroid(d);
        pos[0] = radius * (isOnLeftSide(d) ? 1 : -1);
        pos[1] = pos[1] + fontSize * 0.3;
        return `translate(${pos})`;
      })
      .attr("text-anchor", (d) => (isOnLeftSide(d) ? "start" : "end"))
      .attr("fill", strokeColor)
      .text((d) => buildLabel(d));

    /* ------- polylines: lines joining slice to text  -------*/
    svg
      .append("g")
      .selectAll("polyline")
      .data(arcs)
      .join("polyline")
      .attr("opacity", ".3")
      .attr("stroke", strokeColor)
      .attr("stroke-width", "2px")
      .attr("fill", "none")
      .attr("points", function (d) {
        var pos = outerArc.centroid(d);
        pos[0] = radius * 0.95 * (isOnLeftSide(d) ? 1 : -1);
        return [innerArc.centroid(d), outerArc.centroid(d), pos];
      });
  }

  if (legendType==="outside") {

    const legend = svg
      .append('g')
      .attr('transform', `translate(${radius  + 20},${-radius+40})`);

    legend
      .selectAll(null)
      .data(arcs)
      .enter()
      .append('rect')
      .attr('y', d => fontSize * d.index *1.8)
      .attr('width', fontSize)
      .attr('height', fontSize)
      .attr('fill', d => color(d.value))
      .attr('stroke', strokeColor)
      .style('stroke-width', '1px');

    legend
      .selectAll(null)
      .data(arcs)
      .enter()
      .append('text')
      .text(d=> buildLabel(d)) //d => d.name
      .attr('x', fontSize * 1.5)
      .attr('y', d => fontSize * d.index *1.8 +fontSize )  
      .style('font-size', `${fontSize}px`);
  }

  // title
   svg
      .append('g')
      .attr('transform', `translate(${-radius},${radius+20})`)
      .append('text')
      .attr("font-size", fontSize*1.5)
      .text("Mon bon camembert AOC") //d => d.name
  return svg.node();
}




