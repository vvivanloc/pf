md`
# Diagramme sectoriel - Camembert
`;

Inputs.table(data, {columns: [
    "name",
    "value"
  ],
  header: {
    name: "Poste",
    value: "Consommation en pourcentage",
    
  }
})

viewof legendType = Inputs.select(legendTypes, {label: "Légende", value:"ligne d'attache"})

viewof sortMethod = Inputs.select(sortMethods, {label: "Trier par", value:"par valeur"})

viewof useWSJsort = Inputs.toggle({label:"Ordre de tri proposé par le \"Wall Street Journal\" (1) ", value:false, disabled:sortMethod==="aucun"})
md`<small>Cela permet une comparaison plus naturelle : les deux plus gros secteurs apparaîssent sur les côtés gauche et droit, en haut du camembert.
* [Dona M. Wong, The Wall Street Journal Guide to Information Graphics: The Dos and Don'ts of Presenting Data, Facts, and Figures, W.W. Norton & Company, 2010](https://books.google.fr/books/about/The_Wall_Street_Journal_Guide_to_Informa.html?id=RmaJPgAACAAJ&redir_esc=y)</small>`

viewof nbMaxSlices = Inputs.range([1,data.length], {label:"Nombre de parts",step: 1, value:2})

viewof gradientColor = Inputs.select(gradientColors, {label: "Nuancier", value:"prédéfini"})

md`* <small>[Bob Rudis, Noam Ross and Simon Garnier, Introduction to the viridis color maps, 2021](https://cran.r-project.org/web/packages/viridis/vignettes/intro-to-viridis.html)</small>
* <small>[Nathaniel Smith and Stéfan van der Walt, A Better Default Colormap for Matplotlib,A Better Default Colormap for Matplotlib, SciPy 2015](https://www.youtube.com/watch?v=xAoljeRJ3lU)</small>`

viewof startColor = Inputs.color({label: "Couleur de départ", value: "#ff4040", disabled:disabledPicker})
viewof endColor = Inputs.color({label: "Couleur d'arrivée", value: "#4040ff", disabled:disabledPicker})
viewof gradientNbSteps = Inputs.range([1,nbMaxSlices], {label:"Répétion des couleurs",step: 1, value:nbMaxSlices})


viewof donut = Inputs.toggle({label:"Donut", value:false})
viewof startAngle =  Inputs.range([-360,360], {label:"Angle de départ",step: 45, value:0})
viewof endAngle =  Inputs.range([-360,360], {label:"Angle de fin",step: 45, value:360})

  
chart = {

const strokeColor = theme === "dark" ? "white" : "black"
const arcStrokeColor = theme === "dark" ? "black" : "white"
const _nbMaxSlices = Math.min(nbMaxSlices,data.length)
  
let _data = [...data];

// sort for legend

const _sortingFunctor = sortFunctor(_data);
if (_sortingFunctor!==null) {
  _data = _data. sort(_sortingFunctor)
} 



if (_nbMaxSlices<data.length) {  
  const kept = _data.slice(0,_nbMaxSlices)
  const rest = _data.slice(_nbMaxSlices, _data.length)
  let reduced = {name: "Autres", value:rest.reduce((accum,d)=>accum+d.value,0)}
 _data = kept.concat([reduced]);
  //_data = _data.concat([{name: "other", value:__data.slice(_nbMaxSlices-1,__data.length).reduce((accum,d)=>accum+d.value,0)}])
}



let color = d3
  .scaleOrdinal()
  .domain(_data.map((d) => d.value))
  .range(buildColor().concat("grey"));


const startAngleRad= startAngle * (Math.PI / 180)
const endAngleRad= endAngle * (Math.PI / 180)

// sort for pie
const pie = d3.pie()
    .startAngle(startAngleRad)
    .endAngle(endAngle * (Math.PI / 180))    
    .sort(sortFunctorWithWSJ(_data))
    .value(function(d) {return d.value; })
  
const arcs =pie(_data);

const height = Math.min(width, 500);

const isOnLeftSide = (d) => {
  let _midAngle = (midAngle(d.startAngle, d.endAngle)+Math.PI*2)%(Math.PI*2);
  return _midAngle < Math.PI;
}


const fontSize = 15;
const buildLabel = (d) =>
    `${d.data.name}: ${d.data.value.toLocaleString("fr-FR")}`;

const svg = d3
    .create("svg")
    .attr("viewBox", [-width /2, -height / 2, width, height*1.5]);

const radius = Math.min(width, height) / 2;

  
const innerArc = d3
    .arc()
    .outerRadius(radius * 0.8)
    .innerRadius(radius * (donut ? 0.4 : 0.0));
const outerArc = d3
    .arc()
    .innerRadius(radius * 0.9)
    .outerRadius(radius * 0.9);

if (donut) {
    /* ----- total ------ */
    svg
      .append("g")
      .attr("font-family", "sans-serif")
      .attr("font-size", fontSize*1.2)
      .attr("text-anchor", "middle")
      .attr("fill", strokeColor)
      .append("text")

      .call((text) =>
        text
          .append("tspan")
          .attr("y", "-0.4em")
          
          .text("Total :")
      )
      .call((text) =>
        text
          .append("tspan")
          .attr("x", 0)
          .attr("y", "0.9em")
          
          .text(d3.sum(_data, (d) => d.value).toLocaleString("fr-FR"))
      );
  }

  /* ------- pie slices -------*/
svg
    .append("g")
    .attr("fill", strokeColor)
    .selectAll("path")
    .data(arcs)
    .join("path")
    .attr("fill", (d) => color(d.value))
    .style('stroke', arcStrokeColor)
    .style('stroke-width', 2)
    .attr("d", innerArc);

  
/* ------- text labels inside -------*/
if (legendType==="à l'intérieur") { 
    svg
      .append("g")
      .attr("font-size", fontSize)
      .selectAll("text")
      .data(arcs)
      .join("text")
      .attr("transform", function (d) {
        var pos = innerArc.centroid(d);
        pos[0] = pos[0] - (fontSize * 0.75 * buildLabel(d).length) / 2;
        return `translate(${pos})`;
      })

      .attr("fill", strokeColor)
      .text((d) => buildLabel(d));
  }

  /* ------- polylines: text labels  -------*/
  if (legendType==="ligne d'attache") { 
    svg
      .append("g")
      .attr("font-size", fontSize)
      .selectAll("text")
      .data(arcs)
      .join("text")
      .attr("transform", function (d) {
        var pos = outerArc.centroid(d);
        pos[0] = radius * (isOnLeftSide(d) ? 1 : -1);
        pos[1] = pos[1] + fontSize * 0.3;
        return `translate(${pos})`;
      })
      .attr("text-anchor", (d) => (isOnLeftSide(d) ? "start" : "end"))
      .attr("fill", strokeColor)
      .text((d) => buildLabel(d));

    /* ------- polylines: lines joining slice to text  -------*/
    svg
      .append("g")
      .selectAll("polyline")
      .data(arcs)
      .join("polyline")
      .attr("opacity", ".3")
      .attr("stroke", strokeColor)
      .attr("stroke-width", "2px")
      .attr("fill", "none")
      .attr("points", function (d) {
        var pos = outerArc.centroid(d);
        pos[0] = radius * 0.95 * (isOnLeftSide(d) ? 1 : -1);
        return [innerArc.centroid(d), outerArc.centroid(d), pos];
      });
  }

  if (legendType==="sur le côté") {

    const legend = svg
      .append('g')
      .attr('transform', `translate(${radius  + 20},${-radius+40})`);

    legend
      .selectAll(null)
      .data(arcs)
      .enter()
      .append('rect')
      .attr('y', d => fontSize * d.index *1.8)
      .attr('width', fontSize)
      .attr('height', fontSize)
      .attr('fill', d => color(d.value))
      .attr('stroke', strokeColor)
      .style('stroke-width', '1px');

    legend
      .selectAll(null)
      .data(arcs)
      .enter()
      .append('text')
      .text(d=> buildLabel(d)) //d => d.name
      .attr('x', fontSize * 1.5)
      .attr('y', d => fontSize * d.index *1.8 +fontSize )  
      .style('font-size', `${fontSize}px`);
  }

  // title
   svg
      .append('g')
      .attr('transform', `translate(${-radius+title.length},${radius+20})`)
      .append('text')
      .attr("font-size", fontSize*1.5)
      .text(title) //d => d.name


  return svg.node();
}


title= "Emissions de CO₂ en France 2019"

d3 = require("d3@5");

data = d3.csvParse(
`name,value,color
Alimentation , 24, #8DD3C7,
Consommation, 16, #fb8072,
Transport, 27, #80b1d3,
Dépenses publiques, 14, #bebada,
Habitat, 19, #ffffb3
`,
  d3.autoType
);


legendTypes= ["à l'intérieur","ligne d'attache", "sur le côté"]
sortMethods=["aucun","par nom","par valeur"]
gradientColors=["prédéfini","aucun","monochrome","spectral","rgb","hsl","viridis","plasma","turbo"]

  /** returns the midangle */
   midAngle = (startAngle, endAngle) => {
    return startAngle + (endAngle - startAngle) / 2;
  };

 


  sortFunctorWithWSJ = (data) => {
    
    let _sortFunctor = sortFunctor(data);
    
    if (!useWSJsort) {
      return _sortFunctor
    }
     
    /* WSL recommended sorting for pie chart  */
    /** see https://bl.ocks.org/vijithassar/3cc6ecbc0a8dcfaf4e47f44b97637012 */
    let _data=[...data];
    const sorted = _data.sort(_sortFunctor);
    const first = sorted[0]
    const last = sorted[1]
    const rest = sorted.slice(2)
    const ordered = [first,  ...rest, last]
    return (a,b)=> ordered.indexOf(a) - ordered.indexOf(b)
  
  }


  sortFunctor = (data) => {
    if (sortMethod==="aucun") {
      return null;
    }

    let _sortFunctor = undefined;
    if (sortMethod==="par nom") {
      _sortFunctor = (a,b)=> a.name.localeCompare(b.name);
    }
    if (sortMethod==="par valeur") {
      _sortFunctor = (a,b)=> b.value - a.value;
    }

      return _sortFunctor

  }

  buildColor = () => {

  if (gradientColor==="spectral") {
     if (nbMaxSlices===1) {
      return [d3.interpolateSpectral(0.1)]
    }
    return d3.quantize((t) => d3.interpolateSpectral(t * 0.8 + 0.1), gradientNbSteps) 
  }

  if (gradientColor==="rgb") {
    if (nbMaxSlices===1) {
      return [startColor]
    }
    return d3.quantize((t) => d3.interpolateRgb(startColor, endColor)(t * 0.8 + 0.1), gradientNbSteps)
  }

  if (gradientColor==="hsl") {
    if (nbMaxSlices===1) {
      return [startColor]
    }
    return d3.quantize((t) => d3.interpolateHslLong(startColor, endColor)(t), gradientNbSteps)
  }

  if (gradientColor==="monochrome") {
    if (nbMaxSlices===1) {
      return [startColor]
    }
    const hsl= d3.hsl(startColor);
    const notSatured= d3.rgb(d3.hsl(hsl.h, 0.1, hsl.l))
    return d3.quantize((t) => d3.interpolateHslLong(startColor, notSatured)(t), gradientNbSteps)
  }


  if (gradientColor==="viridis") {
    if (nbMaxSlices===1) {
      return [d3.interpolateViridis(0)]
    }
    return d3.quantize((t) => d3.interpolateViridis(t), gradientNbSteps)
  }

  if (gradientColor==="plasma") {
    if (nbMaxSlices===1) {
      return [d3.interpolatePlasma(0)]
    }
    return d3.quantize((t) => d3.interpolatePlasma(t), gradientNbSteps)
  }

  if (gradientColor==="turbo") {
    if (nbMaxSlices===1) {
      return [d3.interpolateTurbo(0.05)]
    }
    return d3.quantize((t) => d3.interpolateTurbo(t+0.05), gradientNbSteps)
  }

  if (gradientColor==="prédéfini") {
      let _sortFunctor = sortFunctor(data);
      let _data= [... data];
      if (_sortFunctor!==null) {
        _data = _data. sort(_sortFunctor)
      } 
      let colors= _data.map(d=>d.color)
      colors= colors.map((d,index)=>colors[index%gradientNbSteps])
      if (nbMaxSlices<data.length) {
        colors[nbMaxSlices]="gray"
      } 
    
    return colors
  }

  if (gradientColor==="aucun") {
    let _data= [... data];
    let colors= _data.map(d=>"lightgray")
    colors= colors.map((d,index)=>colors[index%gradientNbSteps])
    if (nbMaxSlices<data.length) {
      colors[nbMaxSlices]="gray"
    } 
    
    return colors
  }
  
}

disabledPicker = gradientColor!=="hsl"&&gradientColor!=="rgb"&&gradientColor!=="monochrome"


/*
theme = Generators.observe((notify) => {
  const query = matchMedia("(prefers-color-scheme: dark)");
  const changed = () => notify(query.matches ? "dark" : "light");
  changed();
  query.addListener(changed);
  return () => query.removeListener(changed);
});
*/

theme = "light"

